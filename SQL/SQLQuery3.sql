

--===============================================================  TABELAS ============================================
--TABELA RESPONSAVEL POR ARMAZENAR TODOS OS ARTISTAS
CREATE TABLE TBL_ARTISTAS(
	CPF VARCHAR(11) PRIMARY KEY,
	NOME VARCHAR(200) NOT NULL,
	DNS DATE NOT NULL,
	ID_UF_CIDADE INT FOREIGN KEY REFERENCES TBL_UF_CIDADE(ID_UF_CIDADE)
)

--TABELA RESPONSAVEL POR ARMAZENAR TODOS OS ESTADOS E CIDADES
CREATE TABLE TBL_UF_CIDADE(
	ID_UF_CIDADE INT IDENTITY PRIMARY KEY,
	UF VARCHAR(2) NOT NULL,
	CIDADE VARCHAR(100) NOT NULL,
)
--TABELA RESPONSAVEL POR ARMAZENAR TODOS OS MATERIAIS QUE SERÃO UTILIZADOS NO CADASTRO DE UMA OBRA
CREATE TABLE TBL_MATERIAIS(
	ID_MATERIAL INT IDENTITY PRIMARY KEY,
	MATERIAL VARCHAR(100) NOT NULL,
	OBS VARCHAR(300) NOT NULL,
)
--TABELA RESPONSAVEL POR ARMAZENAR TODAS AS TEMATICAS
CREATE TABLE TBL_TEMATICAS(
	ID_TEMATICA INT IDENTITY PRIMARY KEY,
	TEMATICA VARCHAR(100) NOT NULL
)

--TABELA RESPONSAVEL POR ARMAZENAR TODOS OS DADOS BASICOS DA OBRA
CREATE TABLE TBL_OBRAS(
	ID_OBRA INT IDENTITY PRIMARY KEY,
	CPF VARCHAR(11) FOREIGN KEY REFERENCES TBL_ARTISTAS(CPF),
	NOME VARCHAR(200) NOT NULL,
	DIMENSOES VARCHAR(100) NOT NULL,
	ESTADO CHAR(1) NOT NULL,
	ID_TEMATICA INT FOREIGN KEY REFERENCES TBL_TEMATICAS(ID_TEMATICA) NOT NULL,
	DT_ENTRADA DATE NOT NULL,
	ID_UF_CIDADE INT FOREIGN KEY REFERENCES TBL_UF_CIDADE(ID_UF_CIDADE) NOT NULL,
	CHECK (ESTADO in ('B','R'))
)

--TABELA RESPONSAVEL POR ARMAZENAR TODOS OS MATERIAIS DE UMA OBRA PREVIAMENTE CADASTRADA
CREATE TABLE TBL_MATERIAIS_OBRAS(
	ID_OBRA INT FOREIGN KEY REFERENCES TBL_OBRAS(ID_OBRA),
	ID_MATERIAL INT FOREIGN KEY REFERENCES TBL_MATERIAIS(ID_MATERIAL)
)


CREATE TABLE TBL_CURADOR(
	CPF VARCHAR(11) PRIMARY KEY,
	NOME VARCHAR(200) NOT NULL,
	DNS DATE NOT NULL,
	ID_UF_CIDADE INT FOREIGN KEY REFERENCES TBL_UF_CIDADE(ID_UF_CIDADE)
)

CREATE TABLE TBL_INSTITUICAO(
	ID_INSTITUICAO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(200) NOT NULL,
	RESPONSAVEL VARCHAR(200) NOT NULL,
	CONTATO VARCHAR(200) NOT NULL,
	ID_UF_CIDADE INT FOREIGN KEY REFERENCES TBL_UF_CIDADE(ID_UF_CIDADE)
)

CREATE TABLE TBL_EXPOSICAO(
	ID_EXPOSICAO INT IDENTITY PRIMARY KEY,
	ID_INSTITUICAO INT FOREIGN KEY REFERENCES TBL_INSTITUICAO(ID_INSTITUICAO),
	DESCRICAO VARCHAR(200)
)

CREATE TABLE TBL_ACERVO(
	ID_ACERVO INT IDENTITY,
	ID_EXPOSICAO INT FOREIGN KEY REFERENCES TBL_EXPOSICAO(ID_EXPOSICAO),
	ID_OBRA INT FOREIGN KEY REFERENCES TBL_OBRAS(ID_OBRA)
)

CREATE TABLE TBL_CURADORES_EXPO(
	ID INT IDENTITY,
	CPF VARCHAR(11) FOREIGN KEY REFERENCES TBL_CURADOR(CPF),
	ID_EXPOSICAO INT FOREIGN KEY REFERENCES TBL_EXPOSICAO(ID_EXPOSICAO),
)
--DELETAR TODAS AS ARTES QUANDO DELETAR AS OBRAS
CREATE TABLE TBL_ART_PICTURES(
	ID INT IDENTITY,
	ID_OBRA INT FOREIGN KEY REFERENCES TBL_OBRAS(ID_OBRA),
	[FILE] VARCHAR(100) NOT NULL 
)

--===============================================================  VIEWS ============================================
CREATE VIEW VW_ARTISTAS AS
SELECT 
	TBL_ARTISTAS.CPF,
	TBL_ARTISTAS.NOME,
	TBL_ARTISTAS.DNS,
	TBL_UF_CIDADE.UF,
	TBL_UF_CIDADE.CIDADE
FROM 
	TBL_ARTISTAS
INNER JOIN
	TBL_UF_CIDADE
	ON 
		TBL_ARTISTAS.ID_UF_CIDADE = TBL_UF_CIDADE.ID_UF_CIDADE

CREATE VIEW VW_OBRAS AS
SELECT 
	TBL_OBRAS.ID_OBRA,
	TBL_OBRAS.CPF,
	TBL_OBRAS.NOME,
	TBL_OBRAS.DT_ENTRADA,
	TBL_OBRAS.DIMENSOES,
	TBL_OBRAS.ESTADO,
	TBL_TEMATICAS.TEMATICA,
	TBL_UF_CIDADE.UF,
	TBL_UF_CIDADE.CIDADE
FROM 
	TBL_OBRAS
INNER JOIN
	TBL_UF_CIDADE
	ON 
		TBL_OBRAS.ID_UF_CIDADE = TBL_UF_CIDADE.ID_UF_CIDADE
INNER JOIN
	TBL_TEMATICAS
	ON 
		TBL_OBRAS.ID_TEMATICA = TBL_TEMATICAS.ID_TEMATICA	

--===============================================================  TESTES ============================================

SELECT * FROM TBL_ART_PICTURES

DROP TABLE TBL_CURADORES_EXPO
drop table TBL_ACERVO
drop table TBL_EXPOSICAO
drop table TBL_INSTITUICAO
drop table TBL_CURADOR
drop table TBL_MATERIAIS_OBRAS
drop table TBL_OBRAS
drop table TBL_ART_PICTURES

ALTER TABLE TBL_ARTISTAS ALTER COLUMN DNS DATE

INSERT INTO TBL_ARTISTAS (CPF,NOME,DNS,ID_UF_CIDADE) VALUES
('08639314440','MELQUESEDEQUE','1991-12-23',1)

SELECT * FROM TBL_ARTISTAS


INSERT INTO TBL_OBRAS (CPF,NOME,DIMENSOES,ESTADO,ID_UF_CIDADE,ID_TEMATICA,DT_ENTRADA) VALUES
('08639314440','TESTE','100X150','B',2,1,'2019-01-01')

select * from TBL_ART_PICTURES

ALTER TABLE TBL_OBRAS ADD NOME VARCHAR(200) NOT NULL


delete TBL_ART_PICTURES
delete TBL_OBRAS

INSERT INTO TBL_TEMATICAS (TEMATICA) VALUES
('RENACENTISMO')


SELECT * FROM TBL_OBRAS




use master

CREATE LOGIN wellington WITH PASSWORD = 'wel@123!'		-- Criação do login

					-- Deve ser liberado o acesso ao master e ao banco que sera 
					-- disponibilizado para o usuario com o comando abaixo
CREATE USER [well] 		
FOR LOGIN [wellington] 
WITH DEFAULT_SCHEMA = well; 


create Schema well

CREATE ROLE role_well AUTHORIZATION [well]
GRANT CREATE TABLE TO role_well
GRANT SELECT,INSERT, UPDATE,DELETE, ALTER ON SCHEMA :: well TO well;
EXEC sp_addrolemember 'role_well', 'well'
	
grant alter to well 
DENY ALTER TO WELL








 deny alter TO role_well ON well

GRANT CREATE TABLE TO well WITH ADMIN OPTION;

 grant alter 

 GRANT CREATE TABLE ON SCHEMA :: well TO well;

 GRANT CREATE SERVICE ON well to well
 
  
-- add user to role(s) in db 
ALTER ROLE db_owner DROP MEMBER well; 

CREATE ROLE ROLE_TEST;


-- add user to role(s) in db 
EXEC sp_addrolemember N'well', N'well'



GRANT SELECT TO well 

CREATE ROLE well AUTHORIZATION [dbo]

 ---- Grant access rights to a specific schema in the database
GRANT SELECT, INSERT, UPDATE, DELETE, ALTER ON SCHEMA::well TO well




EXEC sp_droprolemember 'role_well', 'well'
drop role role_well


create table well.TEST(
 NOME varchar(200)
)

DENY ALTER  ON SCHEMA::dbo
      TO TableSelector 
